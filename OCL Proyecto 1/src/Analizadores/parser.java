
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import ocl.proyecto.pkg1.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\003" +
    "\000\002\004\011\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\011\007\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\005\000\002\012\003\000\002\012\003" +
    "\000\002\007\004\000\002\007\003\000\002\010\006\000" +
    "\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\014\004\001\002\000\006\004\011\023" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\017\122\001\002\000\010\004\011\022" +
    "\ufffd\023\007\001\002\000\004\016\033\001\002\000\004" +
    "\022\015\001\002\000\010\004\011\022\ufffc\023\007\001" +
    "\002\000\004\022\uffff\001\002\000\004\022\016\001\002" +
    "\000\004\022\017\001\002\000\004\022\020\001\002\000" +
    "\004\023\023\001\002\000\004\015\032\001\002\000\006" +
    "\015\uffc6\023\023\001\002\000\004\016\024\001\002\000" +
    "\006\013\025\025\026\001\002\000\004\021\030\001\002" +
    "\000\004\021\027\001\002\000\006\015\uffc5\023\uffc5\001" +
    "\002\000\006\015\uffc4\023\uffc4\001\002\000\004\015\uffc7" +
    "\001\002\000\004\002\000\001\002\000\004\023\034\001" +
    "\002\000\004\017\035\001\002\000\004\020\036\001\002" +
    "\000\110\005\040\006\102\007\066\010\042\011\103\012" +
    "\061\013\046\014\054\015\041\016\077\017\052\020\037" +
    "\021\053\022\056\023\045\024\065\026\047\027\067\030" +
    "\064\031\063\032\062\033\060\034\057\035\051\036\050" +
    "\037\044\040\100\041\074\042\070\043\101\044\076\045" +
    "\075\046\073\047\072\050\071\001\002\000\010\012\uffd4" +
    "\021\uffd4\026\uffd4\001\002\000\010\012\uffde\021\uffde\026" +
    "\uffde\001\002\000\010\012\uffd7\021\uffd7\026\uffd7\001\002" +
    "\000\010\012\uffdb\021\uffdb\026\uffdb\001\002\000\010\012" +
    "\116\021\ufff2\026\115\001\002\000\010\012\uffe8\021\uffe8" +
    "\026\uffe8\001\002\000\010\012\112\021\ufff4\026\111\001" +
    "\002\000\004\021\ufff1\001\002\000\010\012\uffd1\021\uffd1" +
    "\026\uffd1\001\002\000\010\012\uffe9\021\uffe9\026\uffe9\001" +
    "\002\000\010\012\uffea\021\uffea\026\uffea\001\002\000\010" +
    "\012\uffd5\021\uffd5\026\uffd5\001\002\000\010\012\uffd3\021" +
    "\uffd3\026\uffd3\001\002\000\010\012\uffd8\021\uffd8\026\uffd8" +
    "\001\002\000\004\021\110\001\002\000\010\012\uffd2\021" +
    "\uffd2\026\uffd2\001\002\000\010\012\uffeb\021\uffeb\026\uffeb" +
    "\001\002\000\010\012\uffec\021\uffec\026\uffec\001\002\000" +
    "\010\012\uffd9\021\uffd9\026\uffd9\001\002\000\010\012\uffed" +
    "\021\uffed\026\uffed\001\002\000\010\012\uffee\021\uffee\026" +
    "\uffee\001\002\000\010\012\uffef\021\uffef\026\uffef\001\002" +
    "\000\010\012\105\021\ufff3\026\104\001\002\000\010\012" +
    "\uffdc\021\uffdc\026\uffdc\001\002\000\010\012\ufff0\021\ufff0" +
    "\026\ufff0\001\002\000\010\012\uffe5\021\uffe5\026\uffe5\001" +
    "\002\000\010\012\uffdf\021\uffdf\026\uffdf\001\002\000\010" +
    "\012\uffe0\021\uffe0\026\uffe0\001\002\000\010\012\uffe1\021" +
    "\uffe1\026\uffe1\001\002\000\010\012\uffe6\021\uffe6\026\uffe6" +
    "\001\002\000\010\012\uffe2\021\uffe2\026\uffe2\001\002\000" +
    "\010\012\uffe3\021\uffe3\026\uffe3\001\002\000\010\012\uffd6" +
    "\021\uffd6\026\uffd6\001\002\000\010\012\uffe7\021\uffe7\026" +
    "\uffe7\001\002\000\010\012\uffe4\021\uffe4\026\uffe4\001\002" +
    "\000\010\012\uffdd\021\uffdd\026\uffdd\001\002\000\010\012" +
    "\uffda\021\uffda\026\uffda\001\002\000\110\005\040\006\102" +
    "\007\066\010\042\011\103\012\061\013\046\014\054\015" +
    "\041\016\077\017\052\020\037\021\053\022\056\023\045" +
    "\024\065\026\047\027\067\030\064\031\063\032\062\033" +
    "\060\034\057\035\051\036\050\037\044\040\100\041\074" +
    "\042\070\043\101\044\076\045\075\046\073\047\072\050" +
    "\071\001\002\000\004\024\106\001\002\000\004\021\ufff9" +
    "\001\002\000\004\021\ufff6\001\002\000\010\004\ufffb\022" +
    "\ufffb\023\ufffb\001\002\000\110\005\040\006\102\007\066" +
    "\010\042\011\103\012\061\013\046\014\054\015\041\016" +
    "\077\017\052\020\037\021\053\022\056\023\045\024\065" +
    "\026\047\027\067\030\064\031\063\032\062\033\060\034" +
    "\057\035\051\036\050\037\044\040\100\041\074\042\070" +
    "\043\101\044\076\045\075\046\073\047\072\050\071\001" +
    "\002\000\004\023\113\001\002\000\004\021\ufffa\001\002" +
    "\000\004\021\ufff7\001\002\000\110\005\040\006\102\007" +
    "\066\010\042\011\103\012\061\013\046\014\054\015\041" +
    "\016\077\017\052\020\037\021\053\022\056\023\045\024" +
    "\065\026\047\027\067\030\064\031\063\032\062\033\060" +
    "\034\057\035\051\036\050\037\044\040\100\041\074\042" +
    "\070\043\101\044\076\045\075\046\073\047\072\050\071" +
    "\001\002\000\102\005\040\006\102\007\066\010\042\011" +
    "\103\012\061\014\054\015\041\016\077\017\052\020\037" +
    "\021\053\022\056\026\047\027\067\030\064\031\063\032" +
    "\062\033\060\034\057\035\051\036\050\037\044\040\100" +
    "\041\074\042\070\043\101\044\076\045\075\046\073\047" +
    "\072\050\071\001\002\000\004\021\ufff8\001\002\000\004" +
    "\021\ufff5\001\002\000\004\022\ufffe\001\002\000\004\020" +
    "\123\001\002\000\022\005\131\006\132\007\124\010\130" +
    "\011\127\013\125\014\134\025\126\001\002\000\022\005" +
    "\131\006\132\007\124\010\130\011\127\013\125\014\134" +
    "\025\126\001\002\000\024\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\013\uffc8\014\uffc8\021\uffc8\025\uffc8\001\002" +
    "\000\024\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\013" +
    "\uffc9\014\uffc9\021\uffc9\025\uffc9\001\002\000\022\005\131" +
    "\006\132\007\124\010\130\011\127\013\125\014\134\025" +
    "\126\001\002\000\022\005\131\006\132\007\124\010\130" +
    "\011\127\013\125\014\134\025\126\001\002\000\022\005" +
    "\131\006\132\007\124\010\130\011\127\013\125\014\134" +
    "\025\126\001\002\000\022\005\131\006\132\007\124\010" +
    "\130\011\127\013\125\014\134\025\126\001\002\000\004" +
    "\021\137\001\002\000\004\023\135\001\002\000\004\015" +
    "\136\001\002\000\024\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\013\uffca\014\uffca\021\uffca\025\uffca\001\002\000" +
    "\010\004\uffd0\022\uffd0\023\uffd0\001\002\000\022\005\131" +
    "\006\132\007\124\010\130\011\127\013\125\014\134\025" +
    "\126\001\002\000\024\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\013\uffce\014\uffce\021\uffce\025\uffce\001\002\000" +
    "\024\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd" +
    "\014\uffcd\021\uffcd\025\uffcd\001\002\000\022\005\131\006" +
    "\132\007\124\010\130\011\127\013\125\014\134\025\126" +
    "\001\002\000\024\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\013\uffcf\014\uffcf\021\uffcf\025\uffcf\001\002\000\024" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb\014" +
    "\uffcb\021\uffcb\025\uffcb\001\002\000\024\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\013\uffcc\014\uffcc\021\uffcc\025" +
    "\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\002\004\001\001\000\010\003\011\004" +
    "\012\011\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\120\004\012\011\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\013" +
    "\004\012\011\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\020" +
    "\010\021\001\001\000\002\001\001\000\006\007\030\010" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\054\006" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\106\006" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\113\006\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\117\006\042\001\001\000\004\006\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\132\001\001\000\004\012" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\144\001\001\000\004\012\142\001\001\000\004\012" +
    "\141\001\001\000\004\012\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  

    public static int contadorid =1;
    public static Nodo Raiz;
    public static int contadorArc = 1;
    public  int contadorhojas = 1;

    public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\home\\Desktop\\Documentos Escritorio\\Universidad\\Quinto Semestre\\Compiladores 1\\Laboratorio\\OLC1-Proyecto1-201905837\\OCL Proyecto 1\\ARBOLES_201905837\\" + nombre+ ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=box]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "C:\\Users\\home\\Desktop\\Documentos Escritorio\\Universidad\\Quinto Semestre\\Compiladores 1\\Laboratorio\\OLC1-Proyecto1-201905837\\OCL Proyecto 1\\ARBOLES_201905837\\" + nombre+ ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "C:\\Users\\home\\Desktop\\Documentos Escritorio\\Universidad\\Quinto Semestre\\Compiladores 1\\Laboratorio\\OLC1-Proyecto1-201905837\\OCL Proyecto 1\\ARBOLES_201905837\\" +nombre + ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";
            contadorArc++;
            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }



    //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
     public void syntax_error(Symbol s)
    {
        System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        Errores nuevoe = new Errores("Tipo Sintactico (Recuperado)", s.value.toString(), s.right+1, s.left+1);
        Interfaz.listaErrores.add(nuevoe);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        Errores nuevoe = new Errores("Tipo Sintactico", s.value.toString(), s.right+1, s.left+1);
        Interfaz.listaErrores.add(nuevoe);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------8


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= llaveapertura CUERPO porcentaje porcentaje porcentaje porcentaje EXPVALIDAR llavecerradura 
            {
              String RESULT =null;
		System.out.println("FUNCIONANDO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CONJUNTO CUERPO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= EXPRESION CUERPO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= EXPRESION 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= CONJUNTO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONJUNTO ::= conj dospuntos identificador guion mayorq CONJUNTODEF puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONJUNTODEF ::= identificador tildeseparacion identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONJUNTODEF ::= entero tildeseparacion entero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONJUNTODEF ::= CODIGOASCCI tildeseparacion CODIGOASCCI 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONJUNTODEF ::= identificador comma CONJUNTODEF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a +","+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONJUNTODEF ::= entero comma CONJUNTODEF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a +","+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONJUNTODEF ::= CODIGOASCCI comma CONJUNTODEF 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a +","+b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONJUNTODEF ::= identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONJUNTODEF ::= entero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONJUNTODEF ::= CODIGOASCCI 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONJUNTODEF ::= especialC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTODEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CODIGOASCCI ::= a33 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CODIGOASCCI ::= a34 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CODIGOASCCI ::= a35 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CODIGOASCCI ::= a36 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CODIGOASCCI ::= a38 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CODIGOASCCI ::= a39 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CODIGOASCCI ::= a40 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CODIGOASCCI ::= a41 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CODIGOASCCI ::= a47 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CODIGOASCCI ::= a60 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CODIGOASCCI ::= a61 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CODIGOASCCI ::= a64 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CODIGOASCCI ::= a91 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CODIGOASCCI ::= a92 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CODIGOASCCI ::= a93 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CODIGOASCCI ::= a94 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CODIGOASCCI ::= a95 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CODIGOASCCI ::= a96 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CODIGOASCCI ::= unaomasveces 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CODIGOASCCI ::= concatenacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CODIGOASCCI ::= ceroomasveces 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CODIGOASCCI ::= disyuncion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CODIGOASCCI ::= ceroounavez 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CODIGOASCCI ::= tildeseparacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CODIGOASCCI ::= llaveapertura 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CODIGOASCCI ::= llavecerradura 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CODIGOASCCI ::= dospuntos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CODIGOASCCI ::= guion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CODIGOASCCI ::= mayorq 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CODIGOASCCI ::= puntoycoma 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CODIGOASCCI ::= porcentaje 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CODIGOASCCI ::= comma 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODIGOASCCI",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= identificador guion mayorq EXPRESIONDEF puntoycoma 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo numeralnodo = new Nodo(null, null, "#", parser.contadorid,"N",parser.contadorhojas, parser.contadorhojas+"",parser.contadorhojas+"");
                parser.contadorhojas++;
                parser.contadorid++;
                Nodo nodoRaiz2 = new Nodo(null,null,"",0,"",0,"","");
                if(a.getAnulable()=="A"){
                    nodoRaiz2 = new Nodo(a, numeralnodo, ".", parser.contadorid,"N",0, a.getPrimeros()+","+numeralnodo.getPrimeros(), numeralnodo.getUltimos());
                }else{
                    nodoRaiz2 = new Nodo(a, numeralnodo, ".", parser.contadorid,"N",0, a.getPrimeros()+"", numeralnodo.getUltimos());
                }
                parser.contadorid++;
                Interfaz.Arboles.add(nodoRaiz2);
                Interfaz.Arboles.add(a);
                Nodo.preOrden(nodoRaiz2);
                 contadorhojas = 1;
                graficarArbol(nodoRaiz2,"Arbol"+s);
                Nodo.graficarTablaSiguientes("Tabla Siguientes "+s);
                Nodo.graficarTablaransciones("Tabla Transiciones "+s);
                Nodo.graficarAFD("AFD "+s);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESIONDEF ::= disyuncion EXPRESIONDEF EXPRESIONDEF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 Nodo nuevaDisyuncion;
                if(a.getAnulable()=="A" || b.getAnulable()=="A"){
                 nuevaDisyuncion = new Nodo(a,b,"\\"+"|",parser.contadorid,"A",0, a.getPrimeros()+","+b.getPrimeros(), a.getUltimos() + ","+b.getUltimos());
                }else{
                 nuevaDisyuncion = new Nodo(a,b,"\\"+"|",parser.contadorid,"N",0, a.getPrimeros()+","+b.getPrimeros(), a.getUltimos() + ","+b.getUltimos());
                }
                parser.contadorid++;
                RESULT=nuevaDisyuncion;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONDEF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESIONDEF ::= concatenacion EXPRESIONDEF EXPRESIONDEF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nuevaConcatenacion  = new Nodo(null,null,"",0,"",0,"","");
                if(a.getAnulable()=="A" && b.getAnulable()=="A"){
                        nuevaConcatenacion = new Nodo(a,b,".",parser.contadorid,"A",0, a.getPrimeros()+","+b.getPrimeros(), a.getUltimos() + ","+b.getUltimos());
                }else if (a.getAnulable()=="N" && b.getAnulable()=="N"){
                     nuevaConcatenacion = new Nodo(a,b,".",parser.contadorid,"N",0,a.getPrimeros()+"", b.getUltimos()+"");
                }else if (a.getAnulable()=="A" && b.getAnulable()=="N"){
                     nuevaConcatenacion = new Nodo(a,b,".",parser.contadorid,"N",0,a.getPrimeros()+","+ b.getPrimeros(), b.getUltimos() +"");
                }else if (a.getAnulable()=="N" && b.getAnulable()=="A"){
                     nuevaConcatenacion = new Nodo(a,b,".",parser.contadorid,"N",0,a.getPrimeros()+"", a.getUltimos()+","+b.getUltimos() );
                }
                parser.contadorid++;
                RESULT=nuevaConcatenacion;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONDEF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESIONDEF ::= unaomasveces EXPRESIONDEF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nuevaunaomasveces;
            if(a.getAnulable()=="N"){
                nuevaunaomasveces = new Nodo(a,null,"+",parser.contadorid,"N",0, a.getPrimeros(), a.getUltimos());
            }else{
                 nuevaunaomasveces = new Nodo(a,null,"+",parser.contadorid,"A",0, a.getPrimeros(), a.getUltimos());
            }
                parser.contadorid++;
                RESULT=nuevaunaomasveces;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONDEF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESIONDEF ::= ceroomasveces EXPRESIONDEF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nuevaceroomasveces = new Nodo(a,null,"*",parser.contadorid,"A",0,a.getPrimeros(), a.getUltimos() );
                parser.contadorid++;
                RESULT=nuevaceroomasveces;
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONDEF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESIONDEF ::= ceroounavez EXPRESIONDEF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nuevocerounavez = new Nodo(a,null,"?",parser.contadorid,"A",0, a.getPrimeros(), a.getUltimos());
                parser.contadorid++;
                RESULT=nuevocerounavez;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONDEF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESIONDEF ::= llaveapertura identificador llavecerradura 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nuevoIdentificador = new Nodo(null, null,a,parser.contadorid,"N", parser.contadorhojas, parser.contadorhojas+"",parser.contadorhojas+"");
                
                parser.contadorhojas++;
                parser.contadorid++;
                RESULT=nuevoIdentificador;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONDEF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESIONDEF ::= cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nuevoCadena = new Nodo(null, null,a.replace("\"",""),parser.contadorid,"N", parser.contadorhojas, parser.contadorhojas+"",parser.contadorhojas+"");
                
                parser.contadorhojas++;
                parser.contadorid++;
                RESULT=nuevoCadena;
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONDEF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESIONDEF ::= especialC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nuevoespcialC = new Nodo(null, null,"\\"+a,parser.contadorid,"N",parser.contadorhojas, parser.contadorhojas+"",parser.contadorhojas+"");
                
                parser.contadorhojas++;
                parser.contadorid++;
                RESULT=nuevoespcialC;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONDEF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPVALIDAR ::= CADENAAR EXPVALIDAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPVALIDAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPVALIDAR ::= CADENAAR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPVALIDAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CADENAAR ::= identificador dospuntos cadena puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Cadena: "+a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENAAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CADENAAR ::= identificador dospuntos especialC puntoycoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Cadena: "+a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENAAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
